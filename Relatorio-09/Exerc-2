# 1. Classe base Musico
class Musico
  attr_reader :nome, :instrumento

  def initialize(nome, instrumento)
    @nome = nome
    @instrumento = instrumento
  end

  # MÃ©todo abstrato â€” deve ser sobrescrito nas subclasses
  def tocar_partitura(peca)
    raise NotImplementedError, "O mÃ©todo tocar_partitura deve ser implementado nas subclasses."
  end

  def to_s
    "#{@nome} (#{@instrumento})"
  end
end

# 2. Classes filhas Pianista e Violinista
class Pianista < Musico
  def initialize(nome)
    super(nome, "Piano")
  end

  def tocar_partitura(peca)
    "#{@nome} toca a peÃ§a '#{peca}' ao piano com emoÃ§Ã£o."
  end
end

class Violinista < Musico
  def initialize(nome)
    super(nome, "Violino")
  end

  def tocar_partitura(peca)
    "#{@nome} interpreta '#{peca}' com o som suave do violino."
  end
end

# 3. Classe Maestro
class Maestro
  def initialize(nome, musicos)
    @nome = nome
    @musicos = musicos
  end

  # 4. MÃ©todo iniciar_ensaio(peca)
  def iniciar_ensaio(peca)
    puts "\nðŸŽµ Maestro #{@nome} inicia o ensaio da peÃ§a '#{peca}'..."
    @musicos.each do |musico|
      puts musico.tocar_partitura(peca)  # Polimorfismo em aÃ§Ã£o
    end
  end

  # 5. MÃ©todo mudar_foco(estado)
  def mudar_foco(estado)
    @musicos.map do |musico|
      "#{musico.nome} agora estÃ¡ #{estado}!"
    end
  end
end

# 6. Programa principal (main)
puts "Digite o nome da peÃ§a a ser ensaiada:"
peca = gets.chomp

# Cria alguns mÃºsicos
musicos = [
  Pianista.new("Kousei"),
  Violinista.new("Kaori")
]

# Cria o maestro
maestro = Maestro.new("Takeshi", musicos)

# Inicia o ensaio
maestro.iniciar_ensaio(peca)

# Muda o foco dos mÃºsicos
puts "\n--- Mudando foco dos mÃºsicos ---"
mensagens_foco = maestro.mudar_foco("Concentrado")
mensagens_foco.each { |msg| puts msg }
